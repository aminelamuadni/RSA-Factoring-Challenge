#!/usr/bin/python3

import sys
import random
import signal

def timeout_handler(signum, frame):
    raise TimeoutError

signal.signal(signal.SIGALRM, timeout_handler)

def gcd(a, b):
    """Compute the greatest common divisor of a and b."""
    while b:
        a, b = b, a % b
    return a

def pollard_rho(n):
    """Use the Pollard rho algorithm to find a divisor of n."""
    if n % 2 == 0:
        return 2
    x = random.randint(1, n - 1)
    y = x
    c = random.randint(1, n - 1)
    g = 1
    while g == 1:
        x = (x * x + c) % n
        y = (y * y + c) % n
        y = (y * y + c) % n
        g = gcd(abs(x - y), n)
    return g

def factorize_rsa(n):
    """Return two prime factors of the RSA number n."""
    if n % 2 == 0:
        return 2, n // 2

    divisor = n
    while divisor == n:
        divisor = pollard_rho(n)
    return divisor, n // divisor

def main():
    if len(sys.argv) < 2:
        print("Usage: rsa <file>")
        sys.exit(1)

    signal.alarm(5)

    try:
        with open(sys.argv[1], 'r') as file:
            number = int(file.readline().strip())
            p, q = factorize_rsa(number)
            if p < q:
                p, q = q, p
            print(f"{number}={p}*{q}")
    except TimeoutError:
        pass

if __name__ == "__main__":
    main()
